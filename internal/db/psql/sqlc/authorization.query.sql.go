// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: authorization.query.sql

package sqlc

import (
	"context"

	zero "gopkg.in/guregu/null.v4/zero"
)

const forgotPassword = `-- name: ForgotPassword :one
UPDATE public.users SET password_hash=$1 WHERE email=$2 RETURNING id
`

type ForgotPasswordParams struct {
	PasswordHash string      `json:"password_hash"`
	Email        zero.String `json:"email"`
}

func (q *Queries) ForgotPassword(ctx context.Context, arg ForgotPasswordParams) (string, error) {
	row := q.db.QueryRow(ctx, forgotPassword, arg.PasswordHash, arg.Email)
	var id string
	err := row.Scan(&id)
	return id, err
}

const loginOneUser = `-- name: LoginOneUser :one
SELECT
    id
    FROM users WHERE username=$1 AND password_hash=$2
`

type LoginOneUserParams struct {
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) LoginOneUser(ctx context.Context, arg LoginOneUserParams) (string, error) {
	row := q.db.QueryRow(ctx, loginOneUser, arg.Username, arg.PasswordHash)
	var id string
	err := row.Scan(&id)
	return id, err
}

const registerOneUser = `-- name: RegisterOneUser :one
INSERT INTO users(id, email,username, password_hash, created_at)
VALUES ($1, $2, $3,$4,$5)
    RETURNING id
`

type RegisterOneUserParams struct {
	ID           string      `json:"id"`
	Email        zero.String `json:"email"`
	Username     string      `json:"username"`
	PasswordHash string      `json:"password_hash"`
	CreatedAt    zero.Time   `json:"created_at"`
}

func (q *Queries) RegisterOneUser(ctx context.Context, arg RegisterOneUserParams) (string, error) {
	row := q.db.QueryRow(ctx, registerOneUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.PasswordHash,
		arg.CreatedAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const selectOnePassword = `-- name: SelectOnePassword :one
SELECT
    id,
    password_hash
    FROM users WHERE username=$1
`

type SelectOnePasswordRow struct {
	ID           string `json:"id"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) SelectOnePassword(ctx context.Context, username string) (SelectOnePasswordRow, error) {
	row := q.db.QueryRow(ctx, selectOnePassword, username)
	var i SelectOnePasswordRow
	err := row.Scan(&i.ID, &i.PasswordHash)
	return i, err
}
