// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	zero "gopkg.in/guregu/null.v4/zero"
)

type AppointmentStatus string

const (
	AppointmentStatusPending   AppointmentStatus = "pending"
	AppointmentStatusConfirmed AppointmentStatus = "confirmed"
	AppointmentStatusCanceled  AppointmentStatus = "canceled"
)

func (e *AppointmentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AppointmentStatus(s)
	case string:
		*e = AppointmentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AppointmentStatus: %T", src)
	}
	return nil
}

type NullAppointmentStatus struct {
	AppointmentStatus AppointmentStatus `json:"appointment_status"`
	Valid             bool              `json:"valid"` // Valid is true if AppointmentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAppointmentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AppointmentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AppointmentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAppointmentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AppointmentStatus), nil
}

type Appointment struct {
	ID              string                `json:"id"`
	UserID          zero.String           `json:"user_id"`
	DoctorID        zero.String           `json:"doctor_id"`
	AppointmentTime time.Time             `json:"appointment_time"`
	Status          NullAppointmentStatus `json:"status"`
	CreatedAt       zero.Time             `json:"created_at"`
	UpdatedAt       zero.Time             `json:"updated_at"`
}

type Doctor struct {
	ID                   string          `json:"id"`
	FirstName            string          `json:"first_name"`
	LastName             string          `json:"last_name"`
	Slug                 string          `json:"slug"`
	Image                string          `json:"image"`
	Experience           int32           `json:"experience"`
	Specialization       string          `json:"specialization"`
	TreatmentProfile     string          `json:"treatment_profile"`
	ProfessionalActivity string          `json:"professional_activity"`
	WorkingHours         json.RawMessage `json:"working_hours"`
	CreatedAt            zero.Time       `json:"created_at"`
	UpdatedAt            zero.Time       `json:"updated_at"`
}

type Notification struct {
	ID            string      `json:"id"`
	AppointmentID zero.String `json:"appointment_id"`
	UserID        zero.String `json:"user_id"`
	DoctorID      zero.String `json:"doctor_id"`
	ScheduledAt   time.Time   `json:"scheduled_at"`
	SentAt        zero.Time   `json:"sent_at"`
	Message       string      `json:"message"`
	Status        zero.String `json:"status"`
}

type User struct {
	ID           string      `json:"id"`
	FullName     zero.String `json:"full_name"`
	PhoneNumber  zero.String `json:"phone_number"`
	Username     string      `json:"username"`
	Email        zero.String `json:"email"`
	PasswordHash string      `json:"password_hash"`
	CreatedAt    zero.Time   `json:"created_at"`
}
