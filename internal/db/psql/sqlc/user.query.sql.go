// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.query.sql

package sqlc

import (
	"context"

	zero "gopkg.in/guregu/null.v4/zero"
)

const countUsers = `-- name: CountUsers :one
SELECT
    COUNT(*)
FROM public.users
WHERE
          full_name ILIKE  $1
         OR phone_number ILIKE  $1 
         OR email ILIKE  $1
`

func (q *Queries) CountUsers(ctx context.Context, fullName zero.String) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers, fullName)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteOneUser = `-- name: DeleteOneUser :exec
    DELETE FROM  public.users WHERE id=$1
`

func (q *Queries) DeleteOneUser(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteOneUser, id)
	return err
}

const editProfileUser = `-- name: EditProfileUser :one
UPDATE public.users SET full_name=$1,phone_number=$2  WHERE id=$3 RETURNING id
`

type EditProfileUserParams struct {
	FullName    zero.String `json:"full_name"`
	PhoneNumber zero.String `json:"phone_number"`
	ID          string      `json:"id"`
}

func (q *Queries) EditProfileUser(ctx context.Context, arg EditProfileUserParams) (string, error) {
	row := q.db.QueryRow(ctx, editProfileUser, arg.FullName, arg.PhoneNumber, arg.ID)
	var id string
	err := row.Scan(&id)
	return id, err
}

const selectManyUsers = `-- name: SelectManyUsers :many
    SELECT
        id, full_name, phone_number, email,username, created_at
        FROM public.users
    WHERE
        full_name ILIKE  $1 
         OR phone_number ILIKE  $1 
         OR email ILIKE  $1 
    ORDER BY id ASC
`

type SelectManyUsersRow struct {
	ID          string      `json:"id"`
	FullName    zero.String `json:"full_name"`
	PhoneNumber zero.String `json:"phone_number"`
	Email       zero.String `json:"email"`
	Username    string      `json:"username"`
	CreatedAt   zero.Time   `json:"created_at"`
}

func (q *Queries) SelectManyUsers(ctx context.Context, fullName zero.String) ([]SelectManyUsersRow, error) {
	rows, err := q.db.Query(ctx, selectManyUsers, fullName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectManyUsersRow
	for rows.Next() {
		var i SelectManyUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.PhoneNumber,
			&i.Email,
			&i.Username,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectOneUser = `-- name: SelectOneUser :one
SELECT
    full_name,
    phone_number,
    email,
    username,
    created_at
    FROM public.users WHERE id=$1
`

type SelectOneUserRow struct {
	FullName    zero.String `json:"full_name"`
	PhoneNumber zero.String `json:"phone_number"`
	Email       zero.String `json:"email"`
	Username    string      `json:"username"`
	CreatedAt   zero.Time   `json:"created_at"`
}

func (q *Queries) SelectOneUser(ctx context.Context, id string) (SelectOneUserRow, error) {
	row := q.db.QueryRow(ctx, selectOneUser, id)
	var i SelectOneUserRow
	err := row.Scan(
		&i.FullName,
		&i.PhoneNumber,
		&i.Email,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}
