// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: doctors.query.sql

package sqlc

import (
	"context"
	"encoding/json"

	zero "gopkg.in/guregu/null.v4/zero"
)

const countDoctors = `-- name: CountDoctors :one
    SELECT COUNT(*) FROM public.doctors
`

func (q *Queries) CountDoctors(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countDoctors)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countManyDoctors = `-- name: CountManyDoctors :one
    SELECT COUNT(*)
    FROM public.doctors
    WHERE
        first_name ILIKE  $1 
        OR last_name ILIKE  $1 
        OR specialization ILIKE  $1 
        OR CAST(experience AS TEXT) ILIKE  $1 
        OR treatment_profile ILIKE  $1 
        OR professional_activity ILIKE  $1
`

func (q *Queries) CountManyDoctors(ctx context.Context, firstName string) (int64, error) {
	row := q.db.QueryRow(ctx, countManyDoctors, firstName)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteOneDoctor = `-- name: DeleteOneDoctor :exec
   DELETE FROM public.doctors WHERE id=$1
`

func (q *Queries) DeleteOneDoctor(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteOneDoctor, id)
	return err
}

const editOneDoctor = `-- name: EditOneDoctor :one
  UPDATE public.doctors
     SET  first_name=$1, last_name=$2, slug=$3, image=$4, experience=$5, specialization=$6, treatment_profile=$7, professional_activity=$8, working_hours=$9, updated_at=$10 WHERE id=$11 RETURNING id
`

type EditOneDoctorParams struct {
	FirstName            string          `json:"first_name"`
	LastName             string          `json:"last_name"`
	Slug                 string          `json:"slug"`
	Image                string          `json:"image"`
	Experience           int32           `json:"experience"`
	Specialization       string          `json:"specialization"`
	TreatmentProfile     string          `json:"treatment_profile"`
	ProfessionalActivity string          `json:"professional_activity"`
	WorkingHours         json.RawMessage `json:"working_hours"`
	UpdatedAt            zero.Time       `json:"updated_at"`
	ID                   string          `json:"id"`
}

func (q *Queries) EditOneDoctor(ctx context.Context, arg EditOneDoctorParams) (string, error) {
	row := q.db.QueryRow(ctx, editOneDoctor,
		arg.FirstName,
		arg.LastName,
		arg.Slug,
		arg.Image,
		arg.Experience,
		arg.Specialization,
		arg.TreatmentProfile,
		arg.ProfessionalActivity,
		arg.WorkingHours,
		arg.UpdatedAt,
		arg.ID,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const insertOneDoctor = `-- name: InsertOneDoctor :one
        INSERT INTO public.doctors(id, first_name, last_name, slug, image, experience, specialization, treatment_profile, professional_activity, working_hours, created_at, updated_at)
        VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) RETURNING id
`

type InsertOneDoctorParams struct {
	ID                   string          `json:"id"`
	FirstName            string          `json:"first_name"`
	LastName             string          `json:"last_name"`
	Slug                 string          `json:"slug"`
	Image                string          `json:"image"`
	Experience           int32           `json:"experience"`
	Specialization       string          `json:"specialization"`
	TreatmentProfile     string          `json:"treatment_profile"`
	ProfessionalActivity string          `json:"professional_activity"`
	WorkingHours         json.RawMessage `json:"working_hours"`
	CreatedAt            zero.Time       `json:"created_at"`
	UpdatedAt            zero.Time       `json:"updated_at"`
}

func (q *Queries) InsertOneDoctor(ctx context.Context, arg InsertOneDoctorParams) (string, error) {
	row := q.db.QueryRow(ctx, insertOneDoctor,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Slug,
		arg.Image,
		arg.Experience,
		arg.Specialization,
		arg.TreatmentProfile,
		arg.ProfessionalActivity,
		arg.WorkingHours,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const selectManyDoctors = `-- name: SelectManyDoctors :many
        SELECT
            id, first_name, last_name, slug, image, experience, specialization, treatment_profile, professional_activity, working_hours, created_at, updated_at
        FROM public.doctors
        WHERE
            first_name ILIKE  $1
            OR last_name ILIKE  $1 
            OR specialization ILIKE  $1 
            OR CAST(experience AS TEXT) ILIKE  $1 
            OR treatment_profile ILIKE  $1 
            OR professional_activity ILIKE  $1 
            LIMIT $2 OFFSET $3
`

type SelectManyDoctorsParams struct {
	FirstName string `json:"first_name"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

func (q *Queries) SelectManyDoctors(ctx context.Context, arg SelectManyDoctorsParams) ([]Doctor, error) {
	rows, err := q.db.Query(ctx, selectManyDoctors, arg.FirstName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Doctor
	for rows.Next() {
		var i Doctor
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Slug,
			&i.Image,
			&i.Experience,
			&i.Specialization,
			&i.TreatmentProfile,
			&i.ProfessionalActivity,
			&i.WorkingHours,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectOneDoctor = `-- name: SelectOneDoctor :one
  SELECT
    first_name, last_name, slug, image, experience, specialization, treatment_profile, professional_activity, working_hours, created_at, updated_at
    FROM public.doctors WHERE id=$1
`

type SelectOneDoctorRow struct {
	FirstName            string          `json:"first_name"`
	LastName             string          `json:"last_name"`
	Slug                 string          `json:"slug"`
	Image                string          `json:"image"`
	Experience           int32           `json:"experience"`
	Specialization       string          `json:"specialization"`
	TreatmentProfile     string          `json:"treatment_profile"`
	ProfessionalActivity string          `json:"professional_activity"`
	WorkingHours         json.RawMessage `json:"working_hours"`
	CreatedAt            zero.Time       `json:"created_at"`
	UpdatedAt            zero.Time       `json:"updated_at"`
}

func (q *Queries) SelectOneDoctor(ctx context.Context, id string) (SelectOneDoctorRow, error) {
	row := q.db.QueryRow(ctx, selectOneDoctor, id)
	var i SelectOneDoctorRow
	err := row.Scan(
		&i.FirstName,
		&i.LastName,
		&i.Slug,
		&i.Image,
		&i.Experience,
		&i.Specialization,
		&i.TreatmentProfile,
		&i.ProfessionalActivity,
		&i.WorkingHours,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
